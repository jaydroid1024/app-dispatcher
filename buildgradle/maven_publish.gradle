apply plugin: 'maven'



println("--------${project.name}：Maven Publish Gradle--------")
//release 和 snapshot 的控制开关
def isUploadToRelease = rootProject.ext.mavenRepo['isUploadToRelease']
//远程Maven仓库的URL Release
def MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo['mavenRepoUrlRelease']
//远程Maven仓库的URL snapshots
def MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']
//远程Maven仓库用户名
def USER_NAME = rootProject.ext.mavenRepo['userName']
//远程Maven仓库密码
def PASSWORD = rootProject.ext.mavenRepo['password']
// 唯一标识 每个组件都要指定
def GROUP = group.toString()
// 项目名称 根据包名取最后的路径名称
def ARTIFACT_ID = GROUP.substring(GROUP.lastIndexOf(".") + 1, GROUP.length())
// 版本号 每个组件都要指定
def VERSION = version.toString()
//远程Maven仓库的URL
def URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL

println("dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION")
println("MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL")
println("MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL")


//上传到Maven仓库的task
uploadArchives {
    repositories.mavenDeployer {
        // 指定maven仓库url
        repository(url: URL) {
            // Nexus私服的账户密码
            authentication(userName: USER_NAME, password: PASSWORD)
        }
        // 唯一标识
        pom.groupId = GROUP
        // 项目名称
        pom.artifactId = ARTIFACT_ID
        // 版本号
        pom.version = VERSION
    }

}

